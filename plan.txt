# JEKYLL WEBSITE SETUP PLAN FOR PERSONAL WRITING SITE

## UNDERSTANDING JEKYLL + CSS/JS ARCHITECTURE

Jekyll is a static site generator that transforms plain text (usually Markdown) into websites. It works by:
- Converting Markdown files into HTML
- Using templates/layouts to maintain consistent design
- Generating a static site that can be hosted on GitHub Pages

**Important**: Jekyll handles content organization and site structure, but all interactive elements, animations, and advanced styling will be implemented with custom CSS and JavaScript.

### Jekyll Components
1. **_config.yml**: Main configuration file that controls site-wide settings
2. **Front Matter**: YAML headers at the top of content files that define metadata
3. **Liquid Templates**: Template language that handles logic and dynamic content
4. **Collections**: Groups of related content (perfect for your writing sections)
5. **Layouts**: Templates that define how pages are structured

### CSS/JavaScript Components
1. **Custom CSS**: All styling, animations, and responsive design
2. **JavaScript Libraries**: For interactive elements and advanced features
3. **Client-side Search**: Using libraries like lunr.js

## REPOSITORY STRUCTURE

```
ChainOfNoThought/
├── _config.yml                  # Site configuration
├── .gitignore                   # Ignores _site/ and other build files
├── index.md                     # Landing page
├── Gemfile                      # Ruby dependencies
├── _includes/                   # Reusable components
│   ├── header.html              # Site header with navigation
│   ├── footer.html              # Site footer
│   ├── search.html              # Search component
│   └── dropdown-nav.html        # Dropdown navigation component
├── _layouts/                    # Page templates
│   ├── default.html             # Base layout
│   ├── home.html                # Landing page layout
│   ├── page.html                # Regular page layout
│   ├── writing.html             # Layout for writing pieces
│   └── collection-index.html    # Layout for collection landing pages
├── _sass/                       # SCSS partials
│   ├── main.scss                # Main styling file
│   ├── _variables.scss          # Color schemes, fonts, sizes
│   ├── _navigation.scss         # Navigation styling
│   ├── _animations.scss         # Custom animations
│   └── _typography.scss         # Text styling
├── assets/                      # Static files
│   ├── css/                     # Compiled CSS
│   ├── js/                      # JavaScript files
│   │   ├── search.js            # Search functionality
│   │   ├── navigation.js        # Dropdown and scroll behavior
│   │   └── animations.js        # Custom animations
│   └── images/                  # Image files
├── _creative-writing/           # Collection for creative writing
│   ├── project1/                # A writing project folder
│   │   ├── chapter1.md          # Individual chapters
│   │   ├── chapter2.md
│   │   └── index.md             # Project overview
├── _essays/                     # Collection for essays
│   ├── essay1.md
│   └── essay2.md
├── pages/                       # Site pages
│   ├── about.md                 # About me page
│   ├── creative-writing.md      # Creative writing landing page
│   ├── essays.md                # Essays landing page
│   └── search.md                # Search page
└── _docs/                       # Hidden documentation (not published)
    ├── DESIGN_GUIDE.md          # Design guidelines document
    └── SITE_MANUAL.md           # Site maintenance guide
```

## CUSTOM CSS/JS FEATURES

### CSS Features (Beyond Jekyll)
1. **Dropdown Navigation**: CSS for dropdown menus and hover effects
2. **Smooth Animations**: Transitions for page elements and navigation
3. **Responsive Design**: Media queries for different screen sizes
4. **Custom Typography**: Font styling and text formatting
5. **Component Styling**: Buttons, cards, navigation bars

### JavaScript Features (Beyond Jekyll)
1. **Search Functionality**: Client-side search with lunr.js
2. **Navigation Behavior**: 
   - Dropdown menus on hover/click
   - Hide/show navigation on scroll
3. **Smooth Transitions**: Between pages and sections
4. **Interactive Elements**: Any clickable components or effects

## DESIGN GUIDELINES DOCUMENT (_docs/DESIGN_GUIDE.md)

This hidden document will contain:
- **Color Scheme**: Beige background (#F5F5DC), blue (#1E90FF) and white (#FFFFFF) accents
- **Typography**: Times New Roman for all text
  - Heading 1: 32px
  - Heading 2: 24px
  - Heading 3: 20px
  - Body: 16px
- **Spacing**: Consistent padding (2rem for sections, 1rem for elements)
- **Component Styles**: Button designs, navigation appearance, card layouts
- **Animation Guidelines**: Timing, easing functions for consistent animations
- **Responsive Breakpoints**: Tablet (768px) and mobile (480px)

## IMPLEMENTATION APPROACH

### 1. Jekyll Setup
1. Install Ruby and Jekyll (prerequisites)
2. Create Gemfile with Jekyll and GitHub Pages dependencies
3. Configure _config.yml with site details and collection settings

### 2. Core Structure
1. Create layouts and includes for consistent page templates
2. Develop SCSS structure with variables for easy theming
3. Set up collections for creative writing and essays

### 3. CSS Implementation
1. Create modular SCSS files for different components
2. Implement responsive design with media queries
3. Build animations and transitions for interactive elements

### 4. JavaScript Implementation
1. Set up navigation behavior (dropdown, scroll effects)
2. Implement search functionality with lunr.js
3. Add smooth transitions and interactive elements

### 5. Navigation System
1. Build main navigation with dropdown capability
   - Use CSS for styling
   - Use JavaScript for hover/click effects
   - Store navigation structure in _data/ for easy maintenance
2. Create secondary navigation for chapters/documents
   - Auto-generate from collection items
   - Use JavaScript to hide on scroll down, reappear on scroll up

### 6. Content Organization
1. Structure writing projects as nested collections
   - Each project has its own directory
   - Chapters are individual files with ordered front matter
2. Use front matter for metadata:
   ```yaml
   ---
   title: "Chapter Title"
   order: 1
   project: "Project Name"
   excerpt: "Brief description"
   date: 2023-01-01
   ---
   ```

### 7. Search Functionality
1. Implement client-side search using lunr.js:
   - Create JSON index of all content
   - Build search interface with instant results
   - Include filtering by content type (creative writing/essays)

## MAINTAINABILITY CONSIDERATIONS

### Code Organization
1. **Modular Components**: 
   - Jekyll includes for HTML structure
   - SCSS partials for styling
   - JS modules for functionality
2. **Variables for Design**: Store all colors, sizes in SCSS variables
3. **Content Separation**: Keep content (Markdown), structure (HTML), and styling (CSS) separate

### Documentation
1. Add extensive comments in all code files
2. Create a comprehensive SITE_MANUAL.md explaining:
   - How to add new content
   - How to modify layouts
   - How to update CSS/JS
   - How to update navigation
   - Troubleshooting common issues

### Future Expansion
1. Design collections to be easily extended
2. Create templates for new content types
3. Document the process for adding new sections
4. Structure CSS/JS for easy expansion

## DEVELOPMENT PHASES

### Phase 1: Foundation
1. Initial Jekyll setup
2. Base layouts and styling
3. Main navigation structure

### Phase 2: Content Structure
1. Create collections for writing types
2. Build content templates
3. Implement chapter navigation

### Phase 3: Interactive Features
1. Implement custom CSS animations and styling
2. Develop JavaScript functionality:
   - Search system
   - Dropdown navigation
   - Scroll behavior
3. Responsive design implementation

### Phase 4: Documentation
1. Create detailed site manual
2. Design guidelines document
3. Code comments and inline documentation

## GITHUB PAGES DEPLOYMENT

1. Push repository to GitHub
2. Enable GitHub Pages in repository settings
3. Site will be available at: https://[username].github.io/ChainOfNoThought/

## MAINTENANCE WORKFLOW

1. Write content in Markdown
2. Add appropriate front matter
3. Place in correct collection folder
4. Push to GitHub repository
5. GitHub Actions will automatically build and deploy the site

This plan provides a complete blueprint for developing a maintainable, well-documented Jekyll site enhanced with custom CSS and JavaScript for a rich, interactive experience that can grow with your needs over time. 